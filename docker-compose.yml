version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mass_tracking_postgres
    environment:
      POSTGRES_DB: mass_tracking_db
      POSTGRES_USER: mass_tracking_user
      POSTGRES_PASSWORD: mass_tracking_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed_data.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5432:5432"
    networks:
      - mass_tracking_network
    restart: unless-stopped

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: mass_tracking_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mass_tracking_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mass_tracking_backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://mass_tracking_user:mass_tracking_password@postgres:5432/mass_tracking_db
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - SECRET_KEY=your-super-secret-flask-key-change-in-production
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - mass_tracking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:5000/api
    container_name: mass_tracking_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - mass_tracking_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: mass_tracking_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - mass_tracking_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mass_tracking_network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml
version: '3.8'

services:
  backend:
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=True
    volumes:
      - ./backend:/app
    command: python src/main.py

  frontend:
    build:
      args:
        - REACT_APP_API_URL=http://localhost:5000/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start
    ports:
      - "3000:3000"

  # Remove nginx in development
  nginx:
    profiles:
      - production

